version: '3.8'

# Full Stack Docker Compose: Biomni + Canvas Integration
# This file combines Biomni agents with Canvas UI for complete NIBR deployment

services:
  # ===========================================
  # BIOMNI CORE SERVICES
  # ===========================================
  
  # Biomni Agent with integrated Jupyter for researchers
  biomni-agent:
    build:
      context: ..
      dockerfile: nibr/docker/Dockerfile.nibr
      target: production
    image: nibr/biomni:latest
    container_name: biomni-agent
    hostname: biomni-agent
    environment:
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      
      # Biomni Configuration
      - BIOMNI_DATA_PATH=/biomni_data
      - BIOMNI_CACHE_PATH=/biomni_data/cache
      - BIOMNI_LOG_LEVEL=${BIOMNI_LOG_LEVEL:-INFO}
      - BIOMNI_SKIP_DOWNLOAD=true
      
      # Jupyter Configuration (runs inside biomni container)
      - ENABLE_JUPYTER=${ENABLE_JUPYTER:-true}
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-biomni}
      
      # Agent Configuration
      - AGENT_TYPE=unified
      - ENABLE_MCP=${ENABLE_MCP:-false}
      
    volumes:
      # Data volumes
      - ${BIOMNI_LOCAL_DATA_PATH:-../data}/data_lake:/biomni_data/data_lake:ro
      - ${BIOMNI_LOCAL_DATA_PATH:-../data}/benchmark:/biomni_data/benchmark:ro
      - biomni-cache:/biomni_data/cache
      - biomni-results:/biomni_data/results
      - biomni-logs:/biomni_data/logs
      - biomni-notebooks:/biomni_data/notebooks
      
      # Mount agent wrappers
      - ./agents:/app/agents:ro
      - ./src:/app/src:ro
      
      # Mount tutorials and examples for Jupyter
      - ../tutorials:/biomni_data/notebooks/tutorials:ro
      - ./notebooks:/biomni_data/notebooks/nibr
      
    ports:
      # Expose Jupyter port
      - "8888:8888"
      
    networks:
      - nibr-network
      
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
          
    healthcheck:
      test: ["CMD", "echo", "OK"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
      
    restart: unless-stopped


  # ===========================================
  # CANVAS UI SERVICES
  # ===========================================
  
  # Canvas Backend (FastAPI)
  canvas-backend:
    build:
      context: ./canvas
      dockerfile: ${CANVAS_BACKEND_DOCKERFILE:-Dockerfile.backend.dev}
    image: nibr/canvas-backend:latest
    container_name: canvas-backend
    hostname: canvas-backend
    environment:
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Biomni Integration
      - BIOMNI_AGENT_URL=http://biomni-agent:8000
      - USE_PERSISTENT_AGENTS=${USE_PERSISTENT_AGENTS:-true}
      
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/canvas.db}
      
      # Redis Cache (optional)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # Environment
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
    volumes:
      # Application code
      - ./canvas/backend:/app/backend:ro
      - ./canvas/scripts:/app/scripts:ro
      - ./src:/app/src:ro
      
      # Persistent data
      - canvas-data:/app/data
      - canvas-logs:/app/logs
      - canvas-uploads:/app/uploads
      
      # Shared Biomni data (read-only)
      - ${BIOMNI_LOCAL_DATA_PATH:-../data}/data_lake:/biomni_data/data_lake:ro
      
    ports:
      - "54367:54367"
      
    networks:
      - nibr-network
      
    depends_on:
      - biomni-agent
        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:54367/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Canvas Frontend (Next.js)
  canvas-frontend:
    build:
      context: ./canvas
      dockerfile: ${CANVAS_FRONTEND_DOCKERFILE:-Dockerfile.frontend.dev}
    image: nibr/canvas-frontend:latest
    container_name: canvas-frontend
    hostname: canvas-frontend
    environment:
      # Backend URL
      - NEXT_PUBLIC_API_URL=http://localhost:54367
      
      # Authentication
      - NEXT_PUBLIC_AUTH_ENABLED=${AUTH_ENABLED:-true}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-change-in-production}
      
      # Features
      - NEXT_PUBLIC_ENABLE_JUPYTER=${ENABLE_JUPYTER:-true}
      - NEXT_PUBLIC_JUPYTER_URL=http://localhost:8888
      
    ports:
      - "3000:3000"
      
    networks:
      - nibr-network
      
    depends_on:
      canvas-backend:
        condition: service_healthy
        
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # ===========================================
  # SUPPORTING SERVICES
  # ===========================================
  
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-biomni}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-biomni-password}
      - POSTGRES_DB=${POSTGRES_DB:-biomni_canvas}
      
    volumes:
      - postgres-data:/var/lib/postgresql/data
      
    ports:
      - "5432:5432"
      
    networks:
      - nibr-network
      
    profiles:
      - production
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U biomni"]
      interval: 10s
      timeout: 5s
      retries: 5
      
    restart: unless-stopped

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
      
    ports:
      - "6379:6379"
      
    networks:
      - nibr-network
      
    profiles:
      - production
      
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: nginx
    hostname: nginx
    volumes:
      - ./canvas/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
      
    ports:
      - "80:80"
      - "443:443"
      
    networks:
      - nibr-network
      
    depends_on:
      - canvas-frontend
      - canvas-backend
      
    profiles:
      - production
      
    restart: unless-stopped

# ===========================================
# NETWORKS
# ===========================================
networks:
  nibr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ===========================================
# VOLUMES
# ===========================================
volumes:
  # Biomni volumes
  biomni-cache:
    driver: local
  biomni-results:
    driver: local
  biomni-logs:
    driver: local
  biomni-notebooks:
    driver: local
    
  # Canvas volumes
  canvas-data:
    driver: local
  canvas-logs:
    driver: local
  canvas-uploads:
    driver: local
    
  # Database volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
    
  # Nginx volumes
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local